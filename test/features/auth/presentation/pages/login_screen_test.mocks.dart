// Mocks generated by Mockito 5.4.6 from annotations
// in picking_verification_app/test/features/auth/presentation/pages/login_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:picking_verification_app/features/auth/domain/entities/permission.dart'
    as _i6;
import 'package:picking_verification_app/features/auth/domain/entities/user_entity.dart'
    as _i2;
import 'package:picking_verification_app/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:picking_verification_app/features/auth/domain/services/permission_service.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserEntity_0 extends _i1.SmartFake implements _i2.UserEntity {
  _FakeUserEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserEntity> login(String? employeeId, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [employeeId, password]),
            returnValue: _i4.Future<_i2.UserEntity>.value(
              _FakeUserEntity_0(
                this,
                Invocation.method(#login, [employeeId, password]),
              ),
            ),
          )
          as _i4.Future<_i2.UserEntity>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getStoredToken() =>
      (super.noSuchMethod(
            Invocation.method(#getStoredToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<_i2.UserEntity?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.UserEntity?>.value(),
          )
          as _i4.Future<_i2.UserEntity?>);

  @override
  _i4.Future<void> storeUser(_i2.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#storeUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearStoredData() =>
      (super.noSuchMethod(
            Invocation.method(#clearStoredData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i5.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String? getInitialRoute(_i2.UserEntity? user) =>
      (super.noSuchMethod(Invocation.method(#getInitialRoute, [user]))
          as String?);

  @override
  bool canAccessRoute(_i2.UserEntity? user, String? route) =>
      (super.noSuchMethod(
            Invocation.method(#canAccessRoute, [user, route]),
            returnValue: false,
          )
          as bool);

  @override
  List<_i5.NavigationOption> getNavigationOptions(_i2.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#getNavigationOptions, [user]),
            returnValue: <_i5.NavigationOption>[],
          )
          as List<_i5.NavigationOption>);

  @override
  bool shouldShowHomeScreen(_i2.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowHomeScreen, [user]),
            returnValue: false,
          )
          as bool);

  @override
  bool validatePermissions(
    _i2.UserEntity? user,
    List<_i6.Permission>? requiredPermissions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validatePermissions, [
              user,
              requiredPermissions,
            ]),
            returnValue: false,
          )
          as bool);
}
