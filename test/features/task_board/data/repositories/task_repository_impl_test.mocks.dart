// Mocks generated by Mockito 5.4.6 from annotations
// in picking_verification_app/test/features/task_board/data/repositories/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:picking_verification_app/features/task_board/data/datasources/task_remote_datasource.dart'
    as _i4;
import 'package:picking_verification_app/features/task_board/data/models/task_list_response_model.dart'
    as _i2;
import 'package:picking_verification_app/features/task_board/data/models/task_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskListResponseModel_0 extends _i1.SmartFake
    implements _i2.TaskListResponseModel {
  _FakeTaskListResponseModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTaskModel_1 extends _i1.SmartFake implements _i3.TaskModel {
  _FakeTaskModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i4.TaskRemoteDataSource {
  MockTaskRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TaskListResponseModel> getAssignedTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAssignedTasks, []),
            returnValue: _i5.Future<_i2.TaskListResponseModel>.value(
              _FakeTaskListResponseModel_0(
                this,
                Invocation.method(#getAssignedTasks, []),
              ),
            ),
          )
          as _i5.Future<_i2.TaskListResponseModel>);

  @override
  _i5.Future<_i2.TaskListResponseModel> refreshTasks() =>
      (super.noSuchMethod(
            Invocation.method(#refreshTasks, []),
            returnValue: _i5.Future<_i2.TaskListResponseModel>.value(
              _FakeTaskListResponseModel_0(
                this,
                Invocation.method(#refreshTasks, []),
              ),
            ),
          )
          as _i5.Future<_i2.TaskListResponseModel>);

  @override
  _i5.Future<_i2.TaskListResponseModel> getTasksByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByType, [type]),
            returnValue: _i5.Future<_i2.TaskListResponseModel>.value(
              _FakeTaskListResponseModel_0(
                this,
                Invocation.method(#getTasksByType, [type]),
              ),
            ),
          )
          as _i5.Future<_i2.TaskListResponseModel>);

  @override
  _i5.Future<_i3.TaskModel> updateTaskStatus(String? taskId, String? status) =>
      (super.noSuchMethod(
            Invocation.method(#updateTaskStatus, [taskId, status]),
            returnValue: _i5.Future<_i3.TaskModel>.value(
              _FakeTaskModel_1(
                this,
                Invocation.method(#updateTaskStatus, [taskId, status]),
              ),
            ),
          )
          as _i5.Future<_i3.TaskModel>);
}
