// Mocks generated by Mockito 5.4.6 from annotations
// in picking_verification_app/test/features/picking_verification/presentation/bloc/picking_verification_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:picking_verification_app/features/picking_verification/domain/entities/picking_order.dart'
    as _i2;
import 'package:picking_verification_app/features/picking_verification/domain/repositories/picking_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePickingOrder_0 extends _i1.SmartFake implements _i2.PickingOrder {
  _FakePickingOrder_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PickingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickingRepository extends _i1.Mock implements _i3.PickingRepository {
  MockPickingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PickingOrder> getPickingOrder(String? orderNumber) =>
      (super.noSuchMethod(
            Invocation.method(#getPickingOrder, [orderNumber]),
            returnValue: _i4.Future<_i2.PickingOrder>.value(
              _FakePickingOrder_0(
                this,
                Invocation.method(#getPickingOrder, [orderNumber]),
              ),
            ),
          )
          as _i4.Future<_i2.PickingOrder>);

  @override
  _i4.Future<bool> activatePickingVerification(String? orderNumber) =>
      (super.noSuchMethod(
            Invocation.method(#activatePickingVerification, [orderNumber]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> verifyPickingItem(
    String? orderId,
    String? itemId,
    bool? isVerified,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPickingItem, [
              orderId,
              itemId,
              isVerified,
            ]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> completeOrderVerification(String? orderId) =>
      (super.noSuchMethod(
            Invocation.method(#completeOrderVerification, [orderId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.PickingOrder> getOrderDetails(String? orderNumber) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderDetails, [orderNumber]),
            returnValue: _i4.Future<_i2.PickingOrder>.value(
              _FakePickingOrder_0(
                this,
                Invocation.method(#getOrderDetails, [orderNumber]),
              ),
            ),
          )
          as _i4.Future<_i2.PickingOrder>);
}
